
--- Start of googleAuth.js ---
// src/auth/social/googleAuth.js
import config from '../../config'

export function getGoogleAuthUrl() {
  const scopes = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
  ];

  const params = new URLSearchParams({
    client_id: config.googleClientId,
    redirect_uri: config.googleRedirectUri,
    response_type: 'code',
    scope: scopes.join(' '),
    access_type: 'offline',
    prompt: 'consent'
  });

  return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;
}

export async function getGoogleUser(code) {
  console.log("[googleAuth] Exchanging code for tokens");

  try {
    // Exchange code for tokens
    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        code,
        client_id: config.googleClientId,
        client_secret: config.googleSecretId,
        redirect_uri: config.googleRedirectUri,
        grant_type: 'authorization_code',
      }),
    });

    if (!tokenResponse.ok) {
      throw new Error('Failed to exchange code for tokens');
    }

    const tokens = await tokenResponse.json();
    console.log("[googleAuth] Token exchange successful");

    // Get user info using access token
    const userResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {
      headers: {
        Authorization: `Bearer ${tokens.access_token}`,
      },
    });

    if (!userResponse.ok) {
      throw new Error('Failed to get user info');
    }

    const userData = await userResponse.json();
    console.log("[googleAuth] User info retrieved successfully");

    return {
      email: userData.email,
      name: userData.name,
      given_name: userData.given_name,
      family_name: userData.family_name,
      picture: userData.picture
    };

  } catch (error) {
    console.error('[googleAuth] Error:', {
      name: error.name,
      message: error.message,
      code: error.code
    });
    throw error;
  }
}

--- End of googleAuth.js ---

--- Start of microsoftAuth.js ---
import config from '../../config'
import { PublicClientApplication, CryptoProvider } from '@azure/msal-node';

const msalConfig = {
    auth: {
        clientId: config.microsoftClientId,
        authority: 'https://login.microsoftonline.com/consumers',
    },
};

export const msalInstance = new PublicClientApplication(msalConfig);


export async function getMicrosoftAuthUrl() {
  console.log("Inside Microsoft")
  const cryptoProvider = new CryptoProvider();
  const { verifier, challenge } = await cryptoProvider.generatePkceCodes();

  const scopes = ['user.read', 'openid', 'profile', 'email'];
  const redirectUri = config.microsoftRedirectUri;
  console.log("Inside Microsoft redirect url: ", redirectUri)
  if (!redirectUri) {
    throw new Error('Redirect URI is not set in environment variables');
  }

  try {
    const authCodeUrlParameters = {
      scopes: scopes,
      redirectUri: redirectUri,
      codeChallenge: challenge,
      codeChallengeMethod: 'S256',
    };

    const response = await msalInstance.getAuthCodeUrl(authCodeUrlParameters);
    
    console.log("Inside Microsoft response url: ", response)
    console.log("Inside Microsoft response verifier: ", verifier)
    return { url: response, codeVerifier: verifier };
  } catch (error) {
    console.error("Error generating auth URL:", error);
    throw error;
  }
}

// export async function getMicrosoftAuthUrl() {
//   console.log("Initiating Microsoft auth URL generation");
  
//   try {
//       // Generate PKCE codes
//       const cryptoProvider = new CryptoProvider();
//       const { verifier, challenge } = await cryptoProvider.generatePkceCodes();

//       const scopes = ['user.read', 'openid', 'profile', 'email', 'offline_access'];
//       const redirectUri = config.microsoftRedirectUri;

//       // Build auth URL manually
//       const params = new URLSearchParams({
//           client_id: config.microsoftClientId,
//           response_type: 'code',
//           redirect_uri: redirectUri,
//           scope: scopes.join(' '),
//           response_mode: 'query',
//           code_challenge: challenge,
//           code_challenge_method: 'S256',
//           prompt: 'select_account'
//       });

//       const authUrl = `https://login.microsoftonline.com/consumers/oauth2/v2.0/authorize?${params.toString()}`;
      
//       console.log("Microsoft Auth - Initialization successful", {
//           redirectUri,
//           scopes: scopes.join(' '),
//           verifierLength: verifier.length,
//           challengeLength: challenge.length
//       });

//       return { 
//           url: authUrl, 
//           codeVerifier: verifier 
//       };

//   } catch (error) {
//       console.error("Microsoft Auth - URL generation error:", error);
//       throw error;
//   }
// }
--- End of microsoftAuth.js ---

--- Start of google/url/route.js ---
import { getGoogleAuthUrl } from '../../../../../auth/social/googleAuth';

export async function GET() {
  const url = getGoogleAuthUrl();
  return new Response(JSON.stringify({ url }), {
    headers: { 'Content-Type': 'application/json' },
  });
}






--- End of google/url/route.js ---

--- Start of google/callback/route.js ---

import { NextResponse } from 'next/server';
import { getGoogleUser } from '../../../../../auth/social/googleAuth';
import { googleLoginRegister } from '../../../../../auth/core/auth';
import { cookies } from 'next/headers';
import config from '../../../../../config';

export async function GET(request) {
  const code = request.nextUrl.searchParams.get('code');
  if (!code) {
    return NextResponse.json({ error: 'No code provided' }, { status: 400 });
  }
  console.log("CALLBACK ")
  try {
    const cookieStore = cookies();
    const googleUser = await getGoogleUser(code);
    console.log("CALLBACK Google response:", googleUser)
    const { access_token, refresh_token, user} = await googleLoginRegister(googleUser.email, googleUser.name);
    console.log("User logged In", user)

        // Create response with user data and set cookies
        // const res = NextResponse.json(
        //     { user, message: 'Login successful' },
        //     { status: 200 }
        // );

        // // Set cookies
        // res.cookies.set('token', access_token, {
        //     httpOnly: true,
        //     secure: process.env.NODE_ENV === 'production',
        //     sameSite: 'strict',
        //     path: '/'
        // });

        // res.cookies.set('refreshToken', refresh_token, {
        //     httpOnly: true,
        //     secure: process.env.NODE_ENV === 'production',
        //     sameSite: 'strict',
        //     path: '/'
        // });

    // Store tokens in cookies (non-httpOnly for client access)
    cookieStore.set('accessToken', access_token, {
        httpOnly: false, // Allow access from JavaScript
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax',
        maxAge: 7 * 24 * 60 * 60,
        path: '/',
    });


    // Set cookies
    cookieStore.set('refreshToken', refresh_token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax',
        maxAge: 7 * 24 * 60 * 60,
        path: '/',
    });

    // Store user data in a non-httpOnly cookie so we can access it client-side
    cookieStore.set('userData', JSON.stringify(user), {
        httpOnly: false,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax',
        maxAge: 7 * 24 * 60 * 60,
        path: '/',
    });

    // Redirect to main application
    return NextResponse.redirect(new URL(config.redirectUrl, request.url));
   
        
  } catch (error) {
    console.error('Google authentication error:', error);
    
    // Redirect to login with error
    const loginUrl = new URL('/login', request.url);
    loginUrl.searchParams.set('error', 'google_auth_failed');
    return NextResponse.redirect(new URL(config.redirectUrl, request.url));
}
}
--- End of google/callback/route.js ---

--- Start of microsoft/url/route.js ---
export const dynamic = 'force-dynamic';

import { NextResponse } from 'next/server';
import { getMicrosoftAuthUrl } from '../../../../../auth/social/microsoftAuth';
import { cookies } from 'next/headers';

export async function GET() {
    console.log("Initiating Microsoft auth URL generation");
    
    try {
        const { url, codeVerifier } = await getMicrosoftAuthUrl();

        const cookieStore = cookies();
        cookieStore.set('codeVerifier', codeVerifier, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax',
            maxAge: 600,
            path: '/',
        });
        console.log("Return URL:", url);
        return NextResponse.json({ url, codeVerifier });
    } catch (error) {
        console.error("Error generating Microsoft auth URL:", error);
        return NextResponse.json({ error: 'Failed to generate auth URL' }, { status: 500 });
    }
}

--- End of microsoft/url/route.js ---

--- Start of microsoft/callback/route.js ---
export const dynamic = 'force-dynamic';

import { NextResponse } from 'next/server';
import { msalInstance } from '../../../../../auth/social/microsoftAuth';
import { microsoftLoginRegister } from '../../../../../auth/core/auth';
import { cookies } from 'next/headers';
import config from '../../../../../config';




// src/app/api/auth/microsoft/callback/route.js
export async function GET(request) {
    const { searchParams } = new URL(request.url);
    console.log("CALLBACK");
    const code = searchParams.get('code');
    console.log("CALLBACK Code:", code);

    if (!code) {
        return NextResponse.json({ error: 'No code provided' }, { status: 400 });
    }

    try {
        const cookieStore = cookies();
        const codeVerifier = cookieStore.get('codeVerifier')?.value;
        console.log("CALLBACK Code Verifier:", codeVerifier);

        if (!codeVerifier) {
            console.error('No code verifier found in cookies');
            return NextResponse.json(
                { error: 'Authentication failed', details: 'No code verifier found' }, 
                { status: 400 }
            );
        }

        const tokenRequest = {
                        code,
                        scopes: ["user.read", "openid", "profile", "email"],
                        redirectUri: config.microsoftRedirectUri,
                        codeVerifier: codeVerifier,
                    };
            
        const response = await msalInstance.acquireTokenByCode(tokenRequest);
        console.log("CALLBACK  Mirosoft Repsonse: ", response)
        const { account } = response;

        const email = account.username || account.idTokenClaims.email;
        const name = account.name 
        console.log("CALLBACK Send to backend ")

        const { access_token, refresh_token, user}  = await microsoftLoginRegister(email, name);
        console.log("User logged In", user)

        // // Create response with user data and set cookies
        // const res = NextResponse.json(
        //     { user, message: 'Login successful' },
        //     { status: 200 }
        // );

       // Store tokens in cookies (non-httpOnly for client access)
        cookieStore.set('accessToken', access_token, {
            httpOnly: false, // Allow access from JavaScript
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax',
            maxAge: 7 * 24 * 60 * 60,
            path: '/',
        });

        // Set cookies
        cookieStore.set('refreshToken', refresh_token, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax',
            maxAge: 7 * 24 * 60 * 60,
            path: '/',
        });

        // Store user data in a non-httpOnly cookie so we can access it client-side
        cookieStore.set('userData', JSON.stringify(user), {
            httpOnly: false,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax',
            maxAge: 7 * 24 * 60 * 60,
            path: '/',
        });

    cookieStore.delete('codeVerifier');

    // Redirect to main application
    return NextResponse.redirect(new URL(config.redirectUrl, request.url));
        

    } catch (error) {
        console.error('Microsoft authentication error:', error);
        
        // Redirect to login with error
        const loginUrl = new URL('/login', request.url);
        loginUrl.searchParams.set('error', 'microsoft_auth_failed');
        // return NextResponse.redirect(loginUrl);
        return NextResponse.redirect(new URL(config.redirectUrl, request.url));
    }

}



--- End of microsoft/callback/route.js ---

