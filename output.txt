
--- Start of next.config.js ---

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,

  // Configure headers for CORS
  async headers() {
    return [
      {
        // Headers for PDF proxy
        source: '/api/file/pdf/proxy',
        headers: [
          { key: 'Access-Control-Allow-Credentials', value: 'true' },
          { key: 'Access-Control-Allow-Origin', value: '*' },
          { key: 'Access-Control-Allow-Methods', value: 'GET, OPTIONS' },
          { key: 'Access-Control-Allow-Headers', value: 'Content-Type, Authorization, X-Requested-With' },
        ],
      },
    ];
  },

  // API and page rewrites
  async rewrites() {
    const isProduction = process.env.IS_PRODUCTION_BACKEND === 'true';
    const baseUrl = isProduction
  ? process.env.BACKEND_BASE_URL || 'https://docgraphapi.up.railway.app'
  : process.env.BACKEND_BASE_URL_DEV || 'http://localhost:8001';
    return [
      // PDF proxy route - handle locally
      {
        source: '/api/file/pdf/proxy',
        destination: '/api/file/pdf/proxy'
      },
      // Handle all other API routes
      {
        source: '/api/:path*',
        destination: `${baseUrl}/api/:path*`
      },
      // Page routes
      {
        source: '/login',
        destination: '/pages/login',
      },
      {
        source: '/register',
        destination: '/pages/register',
      }
    ];
  },

  // WebPack configuration for PDF.js
  webpack: (config) => {
    config.resolve.alias.canvas = false;
    config.resolve.fallback = {
      ...config.resolve.fallback,
      fs: false,
      path: false,
      crypto: false,
    };
    return config;
  },

  // Image domains configuration
  images: {
    domains: [
      'teal-ready-mouse-587.mypinata.cloud',
      'localhost',
      'docgraphapi.up.railway.app'
    ],
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**.mypinata.cloud',
        port: '',
        pathname: '/files/**',
      },
    ],
  },

  // Environment variables
  env: {
    CSRF_SECRET: process.env.CSRF_SECRET,
  },

  // Experimental features
  experimental: {
    // Enable if needed
    // esmExternals: true,
    // serverComponents: true,
  },

  // Compiler options
  compiler: {
    // Remove console logs in production
    removeConsole: false,
  },

  // Enable strict mode for better error catching
  typescript: {
    ignoreBuildErrors: false,
  },

  // Output configuration
  output: 'standalone',

  trailingSlash: true,

  // Disable x-powered-by header
  poweredByHeader: false,

  // Configure compression
  compress: true,

  // Configure asset prefix if needed
  // assetPrefix: process.env.NEXT_PUBLIC_CDN_URL,

  // Configure base path if needed
  basePath: process.env.NODE_ENV === 'production' ? '' : '',

  // Disable image optimization if using external service
  // images: { unoptimized: true },
};

module.exports = nextConfig;
--- End of next.config.js ---

--- Start of postcss.config.js ---

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
--- End of postcss.config.js ---

--- Start of src/config.js ---
const isProductionFrontend = process.env.IS_PRODUCTION_FRONTEND === 'true';
const isProductionBackend = process.env.IS_PRODUCTION_BACKEND === 'true';
  
const config = {
  isProductionFrontend,
  isProductionBackend,
  backendBaseUrl: isProductionBackend 
    ? process.env.BACKEND_BASE_URL
    : process.env.BACKEND_BASE_URL_DEV,
  backendApiUrl: isProductionBackend 
    ? process.env.BACKEND_API_URL
    : process.env.BACKEND_API_URL_DEV,
  redirectUrl: isProductionFrontend 
    ? process.env.FRONTEND_BASE_URL
    : process.env.FRONTEND_BASE_URL_DEV,
  databaseUrl: isProductionBackend
    ? process.env.POSTGRES_URL
    : process.env.POSTGRES_URL_DEV,
  googleClientId: process.env.GOOGLE_CLIENT_ID,
  googleSecretId: process.env.GOOGLE_CLIENT_SECRET,
  googleRedirectUri: isProductionFrontend
    ? process.env.GOOGLE_CALLBACK_URL
    : process.env.GOOGLE_CALLBACK_URL_DEV,
  microsoftClientId: process.env.MICROSOFT_CLIENT_ID,
  microsoftRedirectUri: isProductionFrontend
    ? process.env.MICROSOFT_CALLBACK_URL
    : process.env.MICROSOFT_CALLBACK_URL_DEV,
    
};

module.exports = config;
--- End of src/config.js ---

--- Start of jsconfig.json ---
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
--- End of jsconfig.json ---

--- Start of postcss.config.js ---

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
--- End of postcss.config.js ---

--- Start of tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
      keyframes: {
        wiggle: {
          '0%, 100%': { transform: 'rotate(0deg)' },
          '25%': { transform: 'rotate(-3deg)' },
          '75%': { transform: 'rotate(3deg)' },
        }
      },
      animation: {
        wiggle: 'wiggle 1s ease-in-out',
      }
    },
  },
  plugins: [],
};

--- End of tailwind.config.js ---

--- Start of Dockerfile ---
# # Use the official Node.js 18 image as a parent image
# FROM node:18-alpine

# # Set the working directory
# WORKDIR /app

# # Copy package.json and package-lock.json
# COPY package*.json ./

# # Install dependencies using production flag and cache
# RUN npm ci --production=false
# RUN npm install sharp

# # Copy the rest of your app's source code
# COPY . .

# # Set environment variables
# ENV NODE_ENV=production
# ENV IS_PRODUCTION_FRONTEND=true
# ENV IS_PRODUCTION_BACKEND=true

# # Build your Next.js app
# RUN npm run build

# RUN cp -R .next/static .next/standalone/.next/static
# RUN cp -R public .next/standalone/public

# # Expose the port Next.js runs on
# EXPOSE 3000


# # Start the app
# CMD ["node", ".next/standalone/server.js"]






# Use the official Node.js 18 image as a parent image
FROM node:18-alpine

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies using production flag and cache
RUN npm ci --production=false
RUN npm install sharp

# Copy the rest of your app's source code
COPY . .

# Set environment variables
ENV NODE_ENV=production
ENV IS_PRODUCTION_FRONTEND=true
ENV IS_PRODUCTION_BACKEND=true

# Build your Next.js app
RUN npm run build

RUN cp -R .next/static .next/standalone/.next/static
RUN cp -R public .next/standalone/public

# Expose the port Next.js runs on
EXPOSE 3000


# Start the app
CMD node .next/standalone/server.js
--- End of Dockerfile ---

