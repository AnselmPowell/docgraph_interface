
--- Start of next.config.js ---
// /** @type {import('next').NextConfig} */
// const nextConfig = {
//   reactStrictMode: true,
//   async rewrites() {
//     const isProduction = process.env.IS_PRODUCTION_BACKEND === 'true';
//     const baseUrl = isProduction 
//       ? process.env.BACKEND_BASE_URL || 'https://basedatastorev2-production.up.railway.app/'
//       : process.env.BACKEND_BASE_URL_DEV || 'http://localhost:8001/';
//     return [
//       {
//         source: '/api/:path*',
//         destination: `${baseUrl}/api/:path*` || "https://basedatastorev2-production.up.railway.app'}/api/:path*",
//       },
//       {
//         source: '/login',
//         destination: '/pages/login',
//       },
//       {
//         source: '/register',
//         destination: '/pages/register',
//       }
//     ];
//   },
//   env: {
//     CSRF_SECRET: process.env.CSRF_SECRET,
//   },
//   webpack: (config) => {
//     config.resolve.alias.canvas = false;
//     return config;
//   }
// };

// module.exports = nextConfig;










// /** @type {import('next').NextConfig} */
// const nextConfig = {
//   reactStrictMode: true,

//   // Configure headers for CORS
//   async headers() {
//     return [
//       {
//         // Headers for PDF proxy
//         source: '/api/file/pdf/proxy',
//         headers: [
//           { key: 'Access-Control-Allow-Credentials', value: 'true' },
//           { key: 'Access-Control-Allow-Origin', value: '*' },
//           { key: 'Access-Control-Allow-Methods', value: 'GET,POST,PUT,DELETE,OPTIONS' },
//           { key: 'Access-Control-Allow-Headers', value: 'Content-Type, Authorization, X-Requested-With' },
//         ],
//       },
//     ];
//   },

//   // API and page rewrites
//   async rewrites() {
//     const isProduction = process.env.IS_PRODUCTION_BACKEND === 'true';
//     const baseUrl = isProduction
//       ? process.env.BACKEND_BASE_URL || 'https://basedatastorev2-production.up.railway.app'
//       : process.env.BACKEND_BASE_URL_DEV || 'http://localhost:8001';
    
//     return [
//       // PDF proxy route - handle locally
//       {
//         source: '/api/file/pdf/proxy',
//         destination: '/api/file/pdf/proxy'
//       },
//       // Handle all other API routes
//       {
//         source: '/api/:path*',
//         destination: `${baseUrl}/api/:path*`
//       },
//       // Page routes
//       {
//         source: '/login',
//         destination: '/pages/login',
//       },
//       {
//         source: '/register',
//         destination: '/pages/register',
//       }
//     ];
//   },

//   // WebPack configuration for PDF.js
//   webpack: (config) => {
//     config.resolve.alias.canvas = false;
//     config.resolve.fallback = {
//       ...config.resolve.fallback,
//       fs: false,
//       path: false,
//       crypto: false,
//     };
//     return config;
//   },

//   // Image domains configuration
//   images: {
//     domains: [
//       'teal-ready-mouse-587.mypinata.cloud',
//       'localhost',
//       'basedatastorev2-production.up.railway.app'
//     ],
//     remotePatterns: [
//       {
//         protocol: 'https',
//         hostname: '**.mypinata.cloud',
//         port: '',
//         pathname: '/files/**',
//       },
//     ],
//   },

//   // Environment variables
//   env: {
//     CSRF_SECRET: process.env.CSRF_SECRET,
//   },

//   // Experimental features
//   experimental: {
//     // Enable if needed
//     // esmExternals: true,
//     // serverComponents: true,
//   },

//   // Compiler options
//   compiler: {
//     // Remove console logs in production
//     removeConsole: process.env.NODE_ENV === 'production',
//   },

//   // Enable strict mode for better error catching
//   typescript: {
//     ignoreBuildErrors: false,
//   },

//   // Output configuration
//   output: 'standalone',

//   // Disable x-powered-by header
//   poweredByHeader: false,

//   // Configure compression
//   compress: true,

//   // Configure asset prefix if needed
//   // assetPrefix: process.env.NEXT_PUBLIC_CDN_URL,

//   // Configure base path if needed
//   // basePath: '',

//   // Disable image optimization if using external service
//   // images: { unoptimized: true },
// };

// module.exports = nextConfig;





/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,

  // Configure headers for CORS
  async headers() {
    return [
      {
        // Headers for PDF proxy
        source: '/api/file/pdf/proxy',
        headers: [
          { key: 'Access-Control-Allow-Credentials', value: 'true' },
          { key: 'Access-Control-Allow-Origin', value: '*' },
          { key: 'Access-Control-Allow-Methods', value: 'GET, OPTIONS' },
          { key: 'Access-Control-Allow-Headers', value: 'Content-Type, Authorization, X-Requested-With' },
        ],
      },
    ];
  },

  // API and page rewrites
  async rewrites() {
    const isProduction = process.env.IS_PRODUCTION_BACKEND === 'true';
    const baseUrl = isProduction
      ? process.env.BACKEND_BASE_URL || 'docgraphapi.up.railway.app'
      : process.env.BACKEND_BASE_URL_DEV || 'http://localhost:8001';
    
    return [
      // PDF proxy route - handle locally
      {
        source: '/api/file/pdf/proxy',
        destination: '/api/file/pdf/proxy'
      },
      // Handle all other API routes
      {
        source: '/api/:path*',
        destination: `${baseUrl}/api/:path*`
      },
      // Page routes
      {
        source: '/login',
        destination: '/pages/login',
      },
      {
        source: '/register',
        destination: '/pages/register',
      }
    ];
  },

  // WebPack configuration for PDF.js
  webpack: (config) => {
    config.resolve.alias.canvas = false;
    config.resolve.fallback = {
      ...config.resolve.fallback,
      fs: false,
      path: false,
      crypto: false,
    };
    return config;
  },

  // Image domains configuration
  images: {
    domains: [
      'teal-ready-mouse-587.mypinata.cloud',
      'localhost',
      'basedatastorev2-production.up.railway.app'
    ],
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**.mypinata.cloud',
        port: '',
        pathname: '/files/**',
      },
    ],
  },

  // Environment variables
  env: {
    CSRF_SECRET: process.env.CSRF_SECRET,
  },

  // Experimental features
  experimental: {
    // Enable if needed
    // esmExternals: true,
    // serverComponents: true,
  },

  // Compiler options
  compiler: {
    // Remove console logs in production
    removeConsole: process.env.NODE_ENV === 'production',
  },

  // Enable strict mode for better error catching
  typescript: {
    ignoreBuildErrors: false,
  },

  // Output configuration
  output: 'standalone',

  // Disable x-powered-by header
  poweredByHeader: false,

  // Configure compression
  compress: true,

  // Configure asset prefix if needed
  // assetPrefix: process.env.NEXT_PUBLIC_CDN_URL,

  // Configure base path if needed
  // basePath: '',

  // Disable image optimization if using external service
  // images: { unoptimized: true },
};

module.exports = nextConfig;
--- End of next.config.js ---

--- Start of postcss.config.js ---

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
--- End of postcss.config.js ---

--- Start of src/config.js ---
const isProductionFrontend = process.env.IS_PRODUCTION_FRONTEND === 'true';
const isProductionBackend = process.env.IS_PRODUCTION_BACKEND === 'true';
  
const config = {
  isProductionFrontend,
  isProductionBackend,
  backendBaseUrl: isProductionBackend 
    ? process.env.BACKEND_BASE_URL
    : process.env.BACKEND_BASE_URL_DEV,
  backendApiUrl: isProductionBackend 
    ? process.env.BACKEND_API_URL
    : process.env.BACKEND_API_URL_DEV,
  redirectUrl: isProductionFrontend 
    ? process.env.FRONTEND_BASE_URL_DEV
    : process.env.FRONTEND_BASE_URL_DEV,
  databaseUrl: isProductionBackend
    ? process.env.POSTGRES_URL
    : process.env.POSTGRES_URL_DEV,
  googleClientId: process.env.GOOGLE_CLIENT_ID,
  googleSecretId: process.env.GOOGLE_CLIENT_SECRET,
  googleRedirectUri: isProductionFrontend
    ? process.env.GOOGLE_CALLBACK_URL_DEV
    : process.env.GOOGLE_CALLBACK_URL_DEV,
  microsoftClientId: process.env.MICROSOFT_CLIENT_ID,
  microsoftRedirectUri: isProductionFrontend
    ? process.env.MICROSOFT_CALLBACK_URL_DEV
    : process.env.MICROSOFT_CALLBACK_URL_DEV,
    
};

module.exports = config;
--- End of src/config.js ---

